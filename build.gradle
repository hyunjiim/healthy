plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.7'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //Mybatis
    //1. log4jdbc를 통해 JDBC 쿼리를 로깅하여 디버깅 및 성능 분석
    implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'
    //2. MyBatis를 사용하기 위한 스타터 패키지 - 스프링부트 3.X 이상 버전 사용시 mybatis 3.0.1 버전을 사용해야 함
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'

    //MariaDB
    //1. MariaDB 데이터베이스에 접근하기 위한 MariaDB JDBC 드라이버 의존성
    //implementation 'org.mariadb.jdbc:mariadb-java-client:2.7.3'
    //2. Hibernate에서 Jackson을 사용할 때 발생하는 문제를 해결하기 위한 의존성
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate5'

    //스프링 시큐리티 - 스프링부트 3.X에서 스프링 시큐리티 적용
    //1. 스프링 시큐리티를 사용하기 위한 스타터 추가
    implementation 'org.springframework.boot:spring-boot-starter-security'
    //2. 타임리프에서 스프링 시큐리티를 사용하기 위한 의존성 추가
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    //3. 스프링 시큐리티를 테스트하기 위한 의존성 추가

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    //JSTL 제공
    implementation 'javax.servlet:jstl:1.2'
    implementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'
    implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api:3.0.0'
    implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl:3.0.1'

    //JSP 지원을 위해 Tomcat에 Jasper 포함 - Spring Boot에서 JSP 사용하기 위해 필요
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'

    //런타임 시에만 해당 의존성 포함 - implementation을 사용할지 runtimeOnly를 사용할지 고민!
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client:2.7.4'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'
    //JWT : 리액트로 프론트엔드를 개발할 때 기본 인증을 이용할 수 없으므로 JWT 인증을 이용해야 함
    // => xxxxx.yyyyy.zzzzz와 같이 마침표로 구분된 세 부분으로 구성
    // => 첫 번째 부분(xxxxx) : 토큰의 유형과 해싱 알고리즘 정의 헤더
    // => 두 번째 부분(yyyyy) : 페이로드이며, 일반적으로 인증의 경우 사용자 정보를 포함
    // => 세 번째 부분(zzzzz) : 토큰이 변조되지 않았음을 증명하기 위한 서명
    //JWT 인증 프로세스 : 클라이언트 ---사용자가 사용자 이름과 암호를 이용해 로그인---> 서버 ---사용자가 인증되면 JWT 토큰이 생성되어 클라이언트로 전송--->클라이언트
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

}

tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
    useJUnitPlatform()
}